Sebastian Kot

MRJP - Kompilator Języka Instant (JVM & LLVM)

Kompilacja / uruchamianie:
wymagany jest cabal - configure & build & clean
make       - aby wszystko zbudowac
make clean - aby wyczyścić

Przekopiowanie plikow wykonywalnych jest ustawione na sztywno. tj.
cp dist-newstyle/build/x86_64-linux/ghc-8.4.4/instant-0.0.0.1/x/jvm/build/jvm/jvm insc_jvm
cp dist-newstyle/build/x86_64-linux/ghc-8.4.4/instant-0.0.0.1/x/llvm/build/llvm/llvm insc_llvm
Oznacza to że jeśli defaultowym ghc jest cos innego niz 8.4.4 albo wykonywane jest na innym systemie pliki trzeba przekopiowac ręcznie.
Te sciezki dzialaja na students.


Używane narzędzia i zewnętrzne biblioteki:
1. BNFC wraz z happy i alex
2. cabal
3. Biblioteki:
 - array - dla rzeczy zwiazanych z wygenerowanym kodem z BNFC
 - containers - do map
 - mtl - do łączenia monad
 - process - do odpalania procesów
 - filepath - do manipulowania nazwami i sciezkami
 - runtime do LLVM, jasmin

Struktura katalogów projektu:
- libs/ wcześniej wspomniany runtime i jasmin

- src/ cały kod
    Backend/ gramatyka Instant wygenerowane w BNFC i alex i happy
    Frontend/ zawiera implementacje zamiany struktury drzewa na kod w JVM albo LLVM
        JVM/ implementacja frontendu dla JVM
            Analyzer/ całe body frontendu - tworzymy listę instrukcji czyli cale cialo wynikowe a następnie ją sklejamy
            Constants/ wszystkie stale i stringi ktore warto bylo wyniesc poza plik Analyzer
            Definitions/ czym jest store, env etc
            Utils/ funkcje pomocnicze jak np zmiana push na odpowiedni bipush sipush etc
        LLVM/ implementacja frontendu dla LLVM
            Analyzer/ całe body frontendu - dziala na zasadzie doklejania do pliku w trakcie dzialania poprzez
                wyjęcie z monady odpowiedniej funkcji
            Constants/ wszystkie stale i stringi ktore warto bylo wyniesc poza plik Analyzer
            Definitions/ czym jest store, env etc
        Utils/ zawiera Formatter to zmiany wcięć
    Utils/
        Constants/ komunikaty wspoldzielone miedzy wszystkim
    JVMCompiler.hs plik który łączy backend i frontend w calosc
    LLVMCompiler.hs plik który łączy backend i frontend w calosc


- glowny katalog
    Makefile      - wspiera make all, make clean --> do zbudowania
    Setup.hs      - konfiguracja cabala
    instant.cabal - konfiguracja cabala
